<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/security
                           http://www.springframework.org/schema/security/spring-security.xsd">

    <security:global-method-security access-decision-manager-ref="accessDecisionManager"/>

    <!-- Disable security on static resources -->
    <security:http request-matcher="regex" pattern="/index.jsp" security="none"/>
    <security:http request-matcher="regex" pattern="/favicon.ico" security="none"/>
    <security:http request-matcher="regex" pattern="/css/style.css" security="none"/>

    <!-- Enable Spring Security -->
    <security:http entry-point-ref="restAuthenticationEntryPoint"
                   pattern="/rest/**"
                   use-expressions="true"
                   auto-config="false">
        <security:csrf disabled="true"/>

        <!-- Adds the custom login filter to Spring Security filter chain -->
        <security:custom-filter ref="loginFilter"
                                position="FORM_LOGIN_FILTER"/>

        <!-- Configures the security rules of our REST API -->
        <security:intercept-url pattern="/rest/login**" access="permitAll()"/>
        <security:intercept-url pattern="/rest/users**" access="hasAnyRole('ROLE_SUPERADMIN','ROLE_ADMIN','ROLE_USER')"/>
        <security:intercept-url pattern="/rest/**" access="hasAnyRole('ROLE_SUPERADMIN','ROLE_ADMIN','ROLE_USER')"/>


        <!-- Adds a logout filter to Spring Security filter chain -->
        <security:logout logout-url="/rest/logout"
                         delete-cookies="true"
                         invalidate-session="true"
                         success-handler-ref="restLogoutSuccessHandler"/>

        <security:access-denied-handler ref="accessDeniedHandler"/>

    </security:http>

    <!--SPRING MVC PART SECURITY IMPLEMENTATION -->
    <security:http auto-config="false"
                   create-session="always"
                   use-expressions="true"
                   request-matcher="regex"
                   disable-url-rewriting="false">

        <security:headers disabled="true"/>
        <security:csrf disabled="true"/>
        <security:http-basic/>
        <security:intercept-url pattern="/login.do*" access="permitAll()"/>
        <security:intercept-url pattern="/home.do*" access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_SUPERADMIN')"/>
        <security:intercept-url pattern="/user/home.do*"
                                access="hasAnyRole('ROLE_USER','ROLE_ADMIN','ROLE_SUPERADMIN')"/>
        <security:intercept-url pattern="/admin/home.do*" access="hasAnyRole('ROLE_ADMIN','ROLE_SUPERADMIN')"/>
        <security:intercept-url pattern="/superadmin/home.do*" access="hasRole('ROLE_SUPERADMIN')"/>

        <security:form-login login-page="/login.do"
                             username-parameter="j_username"
                             password-parameter="j_password"
                             login-processing-url="/j_spring_security_check"
                             default-target-url="/home.do"
                             authentication-failure-url="/loginFailed.do?login_error=true"/>
        <security:access-denied-handler error-page="/access.do"/>
        <security:logout logout-url="/logout.do"/>
        <security:session-management invalid-session-url="/login.do"/>
    </security:http>


    <bean id="accessDeniedHandler" class="com.adarsh.spring.rest.security.AccessDeniedHandler"/>

    <!-- Configures the authentication entry point that returns HTTP status code 401 -->
    <bean id="restAuthenticationEntryPoint"
          class="com.adarsh.spring.rest.security.RestAuthenticationEntryPoint"/>

    <bean id="loginFilter"
          class="com.adarsh.spring.rest.security.RestUsernamePasswordAuthenticationFilter">
        <property name="authenticationManager" ref="authenticationManager"/>
        <property name="authenticationFailureHandler" ref="restAuthenticationFailureHandler"/>
        <property name="authenticationSuccessHandler" ref="restAuthenticationSuccessHandler"/>
        <property name="filterProcessesUrl" value="/rest/login"/>
        <property name="usernameParameter" value="j_username"/>
        <property name="passwordParameter" value="j_password"/>
        <property name="postOnly" value="true"/>
    </bean>

    <!-- Configures a custom authentication success handler that returns HTTP status code 200 -->
    <bean id="restAuthenticationSuccessHandler"
          class="com.adarsh.spring.rest.security.RestAuthenticationSuccessHandler">
        <property name="alwaysUseDefaultTargetUrl" value="true"/>
        <property name="defaultTargetUrl" value="/rest/login"/>
    </bean>

    <!-- Configures a custom authentication failure handler that returns HTTP status code 401 -->
    <bean id="restAuthenticationFailureHandler"
          class="com.adarsh.spring.rest.security.RestAuthenticationFailureHandler"/>

    <!-- Configures a custom logout success handler that returns HTTP status code 200 -->
    <bean id="restLogoutSuccessHandler"
          class="com.adarsh.spring.rest.security.RestLogoutSuccessHandler"/>

    <bean id="accessDecisionManager" class="org.springframework.security.access.vote.AffirmativeBased">
        <constructor-arg name="decisionVoters">
            <list>
                <bean class="org.springframework.security.access.vote.RoleVoter">
                    <property name="rolePrefix" value=""/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
        <constructor-arg name="authenticationEntryPoint" ref="restAuthenticationEntryPoint"/>
    </bean>


    <!-- Configures in-memory implementation of the UserDetailsService implementation -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsServiceImpl"/>
        <security:authentication-provider user-service-ref="userDetailsServiceInMemo">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <security:user-service id="userDetailsServiceInMemo">
        <security:user name="admin" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_USER, ROLE_ADMIN"/>
        <security:user name="user" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER"/>
    </security:user-service>

    <bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder"/>


</beans>